rails_env = '<%= configuration[:unicorn][:rails_env] || ENV['RAILS_ENV'] || 'production' %>'

worker_processes <%= configuration[:unicorn][:workers] %>

preload_app <%= configuration[:unicorn][:preload_app] ? "true" : "false" %>

timeout <%= configuration[:unicorn][:timeout] %>

pid '<%= configuration[:unicorn][:pid_file] || "#{configuration[:deploy_to]}/shared/pids/unicorn.pid" %>'

listen '<%= configuration[:unicorn][:socket_ip] %>:<%= configuration[:unicorn][:port] %>', 
  :backlog => <%= configuration[:unicorn][:socket_backlog] %>

##
# REE

# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = RAILS_ROOT + '/tmp/pids/unicorn.pid.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection

  ActiveRecord::Base.establish_connection
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket

  ##
  # Unicorn master is started as root, which is fine, but let's
  # drop the workers to git:git

  change_privs("<%= configuration[:user] %>","<%= configuration[:group] || configuration[:user] %>",
    :worker => worker) if rails_env=="production"
end

def change_privs(user,group, opts={})
  worker=opts[:worker]
  uid, gid = Process.euid, Process.egid
  user, group = 'rails', 'rails'
  target_uid = Etc.getpwnam(user).uid
  target_gid = Etc.getgrnam(group).gid
  worker.tmp.chown(target_uid, target_gid)
  if uid != target_uid || gid != target_gid
    Process.initgroups(user, target_gid)
    Process::GID.change_privilege(target_gid)
    Process::UID.change_privilege(target_uid)
  end
end
