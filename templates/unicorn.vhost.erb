<VirtualHost *:80>
  ServerName <%= configuration[:domain] || (Facter.to_hash["hostname"] + '.' + Facter.to_hash["domain"]) %>
  <% if configuration[:domain_aliases] %>
  ServerAlias <%= configuration[:domain_aliases].to_a.join(' ') %>
  <% end %>
<% if configuration[:ssl] && configuration[:ssl][:only] %>
  RewriteEngine On
  RewriteCond %{HTTPS} !=on
  RewriteCond %{REQUEST_URI} !^/server-status
  RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
<% else %>
  DocumentRoot <%= configuration[:deploy_to] + "/current/public" %>

  <Directory <%= configuration[:deploy_to] + "/current/public" %>>
    Options FollowSymLinks
    Options -MultiViews
    AllowOverride <%= if configuration[:apache]; configuration[:apache][:allow_override] || 'None'; else 'None'; end %>
    Order allow,deny
    Allow from all
    <%= "FileETag #{configuration[:apache][:file_etag]}" if configuration[:apache][:file_etag] %>
  </Directory>

  <% if configuration[:apache ] && (configuration[:apache][:users] || configuration[:apache][:allow] || configuration[:apache][:deny]) %>
  <Location / >
    <% if configuration[:apache][:users] %>
    authtype basic
    authuserfile <%= configuration[:apache][:htpasswd] || "#{configuration[:deploy_to]}/shared/config/htpasswd" %>
    authname "<%= configuration[:authname] || configuration[:domain] %>"
    <% end %>
    <Limit GET POST DELETE PUT>
      order deny,allow
      <% if configuration[:apache][:users] || configuration[:apache][:allow] %>
      deny from all
      <% end %>
      <% configuration[:apache][:deny].to_a.each do |deny| %>
      deny from <%= deny %>
      <% end %>
      <% configuration[:apache][:allow].to_a.each do |allow| %> 
      allow from <%= allow %>
      <% end %>
      <% if configuration[:apache][:users] %>
      require valid-user
      <% end %>
      Satisfy <%= configuration[:apache][:satisfy] || 'Any' %>
    </Limit>
  </Location>
  <% end %>

  <% if configuration[:assets] %>
    # Recommendations for asset pipline: http://guides.rubyonrails.org/asset_pipeline.html#in-production
    <LocationMatch "^/assets/.*$">
      Header unset ETag
      FileETag None
      # RFC says only cache for 1 year
      ExpiresActive On
      ExpiresDefault "access plus 1 year"
    </LocationMatch>
  <% else %>
    # Using the Rails Asset pipeline? Enable it with:
    #
    #   :assets:
    #     :enabled: true
  <% end %>

  # Deflate
  <IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE <%= configuration[:apache][:gzip_types].join(' ') %>
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
  </IfModule>

  RequestHeader set X-Request-Start "%t"

  RewriteEngine On

  <%= configuration[:unicorn][:vhost_extra] %>

<% if configuration[:scm].to_s == 'subversion' %>
  # Prevent access to svn metadata
  RewriteRule ^(.*/)?\.svn/ - [F,L]
  ErrorDocument 403 "Access Forbidden"
<% end %>

<% if configuration[:unicorn][:maintenance_rewrite] %>
	<%= configuration[:unicorn][:maintenance_rewrite] %>
<% else %>
  # Check for maintenance file and redirect all requests
  ErrorDocument 503 /system/maintenance.html
  RewriteCond %{REQUEST_URI} !\.(css|jpg|png|gif)$
  RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
  RewriteCond %{SCRIPT_FILENAME} !maintenance.html
  RewriteRule ^.*$ /system/maintenance.html [R=<%= configuration[:unicorn][:maintenance_status_code] || 503 %>,L]
<% end %>

  # Rewrite index to check for static
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>/index.html -f
  RewriteRule  ^/?$ <%= configuration[:unicorn][:page_cache_directory] %>/index.html [QSA,L]

  # Rewrite to check for Rails non-html cached pages (i.e. xml, json, atom, etc)
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>%{REQUEST_URI} -f
  RewriteRule  ^(.*)$ <%= configuration[:unicorn][:page_cache_directory] %>$1 [QSA,L]

  # Rewrite to check for Rails cached html page
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>%{REQUEST_URI}.html -f
  RewriteRule  ^(.*)$ <%= configuration[:unicorn][:page_cache_directory] %>$1.html [QSA,L]

  # Link to unicorn
  RewriteRule ^/(.*)$ balancer://unicorn%{REQUEST_URI} [P,QSA,L]
  
  # ProxyPassReverse / balancer://unicorn
  # ProxyPreserveHost on
  
  <Proxy balancer://unicorn>
    Allow from all
    BalancerMember http://<%= configuration[:unicorn][:socket_ip] %>:<%= configuration[:unicorn][:port]%>
  </Proxy>
  ProxyTimeout <%= configuration[:unicorn][:timeout] %>


<% end %>
</VirtualHost>

<% if configuration[:ssl] %>
<VirtualHost <%= configuration[:ssl][:ip] || '_default_' %>:443>
  RequestHeader set X_FORWARDED_PROTO "https"

  SSLEngine on
  SSLCipherSuite <%= configuration[:ssl][:cipher_suite] || 'ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL' %>
  SSLCertificateFile    <%= configuration[:ssl][:certificate_file] || '/etc/ssl/certs/ssl-cert-snakeoil.pem' %>
  SSLCertificateKeyFile <%= configuration[:ssl][:certificate_key_file] || '/etc/ssl/private/ssl-cert-snakeoil.key' %>
  <% if configuration[:ssl][:certificate_chain_file] %>
  SSLCertificateChainFile <%= configuration[:ssl][:certificate_chain_file] %>
  <% else %>
  # SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt
  <% end %>
  <% if configuration[:ssl][:protocol] %>
  SSLProtocol <%= configuration[:ssl][:protocol] %>
  <% end %>

  BrowserMatch ".*MSIE.*" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0

  ServerName <%= configuration[:domain] || (Facter.to_hash["hostname"] + '.' + Facter.to_hash["domain"]) %>
  <% if configuration[:domain_aliases] %>
  ServerAlias <%= configuration[:domain_aliases].to_a.join(' ') %>
  <% end %>
  DocumentRoot <%= configuration[:deploy_to] + "/current/public" %>

  <Directory <%= configuration[:deploy_to] + "/current/public" %>>
    <% if configuration[:unicorn][:limit_except] %>
      <%= configuration[:unicorn][:limit_except] %>
    <% end %>
    Options FollowSymLinks
    AllowOverride <%= if configuration[:apache]; configuration[:apache][:allow_override] || 'None'; else 'None'; end %>
    Order allow,deny
    Allow from all
    <%= "FileETag #{configuration[:apache][:file_etag]}" if configuration[:apache][:file_etag] %>
  </Directory>

  <% if configuration[:apache ] and (configuration[:apache][:users] || configuration[:apache][:allow] || configuration[:apache][:deny]) %>
  <Location / >
    <% if configuration[:apache][:users] %>
    authtype basic
    authuserfile <%= configuration[:apache][:htpasswd] || "#{configuration[:deploy_to]}/shared/config/htpasswd" %>
    authname "<%= configuration[:authname] || configuration[:domain] %>"
    <% end %>
    <Limit GET POST DELETE PUT>
      order deny,allow
      <% if configuration[:apache][:users] || configuration[:apache][:allow] %>
      deny from all
      <% end %>
      <% configuration[:apache][:deny].to_a.each do |deny| %>
      deny from <%= deny %>
      <% end %>
      <% configuration[:apache][:allow].to_a.each do |allow| %> 
      allow from <%= allow %>
      <% end %>
      <% if configuration[:apache][:users] %>
      require valid-user
      <% end %>
      Satisfy <%= configuration[:apache][:satisfy] || 'Any' %>
    </Limit>
  </Location>
  <% end %>


  # Deflate
  <IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE <%= configuration[:apache][:gzip_types].join(' ') %>
    BrowserMatch ^Mozilla/4 gzip-only-text/html
    BrowserMatch ^Mozilla/4\.0[678] no-gzip
    BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
  </IfModule>

  RequestHeader set X-Request-Start "%t"

  RewriteEngine On

<% if configuration[:ssl] %>
  <%= configuration[:ssl][:vhost_extra] %>
<% else %>
  <%= configuration[:unicorn][:vhost_extra] %>
<% end %>

<% if configuration[:scm].to_s == 'subversion' %>
  # Prevent access to svn metadata
  RewriteRule ^(.*/)?\.svn/ - [F,L]
  ErrorDocument 403 "Access Forbidden"
<% end %>

<% if configuration[:unicorn][:maintenance_rewrite] %>
	<%= configuration[:unicorn][:maintenance_rewrite] %>
<% else %>
  # Check for maintenance file and redirect all requests
  ErrorDocument 503 /system/maintenance.html
  RewriteCond %{REQUEST_URI} !\.(css|jpg|png|gif)$
  RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
  RewriteCond %{SCRIPT_FILENAME} !maintenance.html
  RewriteRule ^.*$ /system/maintenance.html [R=<%= configuration[:unicorn][:maintenance_status_code] || 503 %>,L]
<% end %>

  # Rewrite index to check for static
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>/index.html -f
  RewriteRule  ^/?$ <%= configuration[:unicorn][:page_cache_directory] %>/index.html [QSA,L]

  # Rewrite to check for Rails non-html cached pages (i.e. xml, json, atom, etc)
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>%{REQUEST_URI} -f
  RewriteRule  ^(.*)$ <%= configuration[:unicorn][:page_cache_directory] %>$1 [QSA,L]

  # Rewrite to check for Rails cached html page
  RewriteCond  %{THE_REQUEST} ^(GET|HEAD)
  RewriteCond  %{DOCUMENT_ROOT}<%= configuration[:unicorn][:page_cache_directory] %>%{REQUEST_URI}.html -f
  RewriteRule  ^(.*)$ <%= configuration[:unicorn][:page_cache_directory] %>$1.html [QSA,L]

  # Link to unicorn
  RewriteRule ^/(.*)$ balancer://unicorn%{REQUEST_URI} [P,QSA,L]
  <Proxy balancer://unicorn>
    Allow from all
    BalancerMember http://<%= configuration[:unicorn][:socket_ip] %>:<%= configuration[:unicorn][:port]%>
  </Proxy>
  ProxyTimeout <%= configuration[:unicorn][:timeout] %>

  </VirtualHost>
<% end %>
